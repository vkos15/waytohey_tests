plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'


}

/*
sourceSets.all {
    configurations.getByName(runtimeClasspathConfigurationName) {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
    configurations.getByName(compileClasspathConfigurationName) {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
}
*/
repositories {
    mavenCentral()
}

def allureVersion = "2.17.3",
    selenideVersion = "6.19.1",
    junitVersion = "5.8.1"

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:1.9.6",
            "com.github.javafaker:javafaker:1.0.2",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:4.3.1",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.aeonbits.owner:owner:1.0.12",
            "org.assertj:assertj-core:3.19.0",
            "org.junit.jupiter:junit-jupiter:$junitVersion"
            )
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:1.7.29",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

            {
                excludeTags 'w2h', 'loveru'
            }


    systemProperty("environment",System.getProperty("environment", "prodloveru"))

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

}


task parametrized_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'parametrized_tests'
    }

}

task all_loveru_test(type: Test) {
    useJUnitPlatform {
        includeTags 'general','loveru'
    }
}

task all_waytohey_test(type: Test) {
    useJUnitPlatform {
        includeTags 'general', 'w2h'
    }

}
    task email_reg_test(type: Test) {
        useJUnitPlatform {
            includeTags 'reg with email'
        }
}


